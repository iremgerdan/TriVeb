[{"/home/iremgerdan/Desktop/triveb/frontend/src/index.tsx":"1","/home/iremgerdan/Desktop/triveb/frontend/src/reportWebVitals.ts":"2","/home/iremgerdan/Desktop/triveb/frontend/src/App.tsx":"3","/home/iremgerdan/Desktop/triveb/frontend/src/routers/Routes.tsx":"4","/home/iremgerdan/Desktop/triveb/frontend/src/routers/Host.tsx":"5","/home/iremgerdan/Desktop/triveb/frontend/src/containers/AuthProvider.tsx":"6","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Player/GameFinished/GameFinished.tsx":"7","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Player/Home/Home.tsx":"8","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Player/Game/Game.tsx":"9","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Player/Lobby/Lobby.tsx":"10","/home/iremgerdan/Desktop/triveb/frontend/src/containers/Navbar.tsx":"11","/home/iremgerdan/Desktop/triveb/frontend/src/utils/helpers.ts":"12","/home/iremgerdan/Desktop/triveb/frontend/src/store/auth/auth.ts":"13","/home/iremgerdan/Desktop/triveb/frontend/src/hooks/use-local-storage.tsx":"14","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/Lobby/Lobby.tsx":"15","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/Home/Home.tsx":"16","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/NewQuiz/NewQuiz.tsx":"17","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/SignUp/SignUp.tsx":"18","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/Login/Login.tsx":"19","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/GameFinished/GameFinished.tsx":"20","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/Game/Game.tsx":"21","/home/iremgerdan/Desktop/triveb/frontend/src/services/index.ts":"22","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/Quiz/Quiz.tsx":"23","/home/iremgerdan/Desktop/triveb/frontend/src/store/game/player.ts":"24","/home/iremgerdan/Desktop/triveb/frontend/src/services/quizzes.ts":"25","/home/iremgerdan/Desktop/triveb/frontend/src/services/users.ts":"26","/home/iremgerdan/Desktop/triveb/frontend/src/store/quiz/quiz.ts":"27","/home/iremgerdan/Desktop/triveb/frontend/src/utils/http.ts":"28"},{"size":899,"mtime":1610899496000,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":1610899496000,"results":"31","hashOfConfig":"30"},{"size":357,"mtime":1610899496000,"results":"32","hashOfConfig":"30"},{"size":1050,"mtime":1611213695000,"results":"33","hashOfConfig":"30"},{"size":1528,"mtime":1611157371000,"results":"34","hashOfConfig":"30"},{"size":1353,"mtime":1610899496000,"results":"35","hashOfConfig":"30"},{"size":1086,"mtime":1611215478000,"results":"36","hashOfConfig":"30"},{"size":2547,"mtime":1611260497011,"results":"37","hashOfConfig":"30"},{"size":5122,"mtime":1611242664000,"results":"38","hashOfConfig":"30"},{"size":1598,"mtime":1611215081000,"results":"39","hashOfConfig":"30"},{"size":1200,"mtime":1611228133000,"results":"40","hashOfConfig":"30"},{"size":96,"mtime":1610899496000,"results":"41","hashOfConfig":"30"},{"size":181,"mtime":1610899496000,"results":"42","hashOfConfig":"30"},{"size":695,"mtime":1610899496000,"results":"43","hashOfConfig":"30"},{"size":2830,"mtime":1611214823000,"results":"44","hashOfConfig":"30"},{"size":2537,"mtime":1611214478000,"results":"45","hashOfConfig":"30"},{"size":8820,"mtime":1611214790000,"results":"46","hashOfConfig":"30"},{"size":3574,"mtime":1611214410000,"results":"47","hashOfConfig":"30"},{"size":2518,"mtime":1611214268000,"results":"48","hashOfConfig":"30"},{"size":1999,"mtime":1611215488000,"results":"49","hashOfConfig":"30"},{"size":3859,"mtime":1611242658000,"results":"50","hashOfConfig":"30"},{"size":52,"mtime":1610899496000,"results":"51","hashOfConfig":"30"},{"size":11470,"mtime":1611214775000,"results":"52","hashOfConfig":"30"},{"size":182,"mtime":1610899496000,"results":"53","hashOfConfig":"30"},{"size":826,"mtime":1611214501000,"results":"54","hashOfConfig":"30"},{"size":710,"mtime":1610899496000,"results":"55","hashOfConfig":"30"},{"size":449,"mtime":1610899496000,"results":"56","hashOfConfig":"30"},{"size":323,"mtime":1611260279020,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"8388wr",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/iremgerdan/Desktop/triveb/frontend/src/index.tsx",[],["125","126"],"/home/iremgerdan/Desktop/triveb/frontend/src/reportWebVitals.ts",[],"/home/iremgerdan/Desktop/triveb/frontend/src/App.tsx",[],"/home/iremgerdan/Desktop/triveb/frontend/src/routers/Routes.tsx",[],"/home/iremgerdan/Desktop/triveb/frontend/src/routers/Host.tsx",[],"/home/iremgerdan/Desktop/triveb/frontend/src/containers/AuthProvider.tsx",[],"/home/iremgerdan/Desktop/triveb/frontend/src/screens/Player/GameFinished/GameFinished.tsx",["127"],"import React from \"react\";\nimport { Button, Grid, Spacer, Text } from \"@geist-ui/react\";\nimport { Link, Redirect, useLocation } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { player as playerState } from \"store/game/player\";\n\nimport { Game } from \"interfaces/services/models/Game\";\n\nimport \"./GameFinished.scss\";\n\nconst GameFinished = () => {\n  const { state: routerState } = useLocation();\n  const player = useRecoilValue(playerState);\n\n  if (!routerState) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const { game } = routerState as { game: Game };\n\n  const [currentPlayer] = game.players.filter(\n    (item) => item.playerName === player!.playerName\n  );\n\n  return (\n    <div className=\"player-game-finished\">\n      <Spacer y={2} />\n\n      <Text h1>Game finished</Text>\n\n      <Spacer y={1} />\n\n      <Text h3>Total Points</Text>\n      <Text h3 type=\"secondary\">\n        {currentPlayer.totalPoints}\n      </Text>\n\n      <Spacer y={4} />\n\n      <Link to=\"/\">\n        <Button>Back to home</Button>\n      </Link>\n    </div>\n  );\n};\n\nexport default GameFinished;\n","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Player/Home/Home.tsx",["128"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Display, Grid, Image, Input, Spacer, Text } from \"@geist-ui/react\";\nimport { Key, User } from \"@geist-ui/react-icons\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport * as validator from \"class-validator\";\nimport { useRecoilState } from \"recoil\";\n\nimport { player as playerStore } from \"store/game/player\";\n\nimport { Player } from \"interfaces/services/game/player\";\n\nimport \"./Home.scss\";\n\nconst Home = () => {\n  const [pin, setPin] = useState(\"\");\n  const [playerName, setPlayerName] = useState(\"\");\n  const [, setPlayer] = useRecoilState(playerStore);\n  const history = useHistory();\n\n  useEffect(() => {\n    socketEventListeners();\n\n    return () => {\n      window.socket.off(\"player-joined\");\n    };\n  }, []);\n\n  const socketEventListeners = () => {\n    window.socket.on(\"player-joined\", (data: Player) => {\n      setPlayer(data);\n\n      setPin((currentValue) => {\n        history.push(`/lobby`, {\n          pin: currentValue,\n        });\n\n        return currentValue;\n      });\n    });\n  };\n\n  const handlePinChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPin(event.target.value);\n  };\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPlayerName(event.target.value);\n  };\n\n  const handleJoinGamePress = () => {\n    window.socket.emit(\"join-game\", {\n      pin,\n      playerName,\n    });\n  };\n\n  const canSubmit =\n    validator.length(pin, 6, 6) && validator.minLength(playerName, 1);\n\n  return (\n    <div className=\"player-home\">\n      <Display shadow>\n        <Image width={200} height={200} src={`${process.env.PUBLIC_URL}/logo.png`} />\n      </Display>\n\n      <Text h1>Join a game</Text>\n\n      <div>\n        <Spacer y={1} />\n\n        <Input\n          className=\"input\"\n          icon={<User />}\n          placeholder=\"Player name\"\n          value={playerName}\n          onChange={handleNameChange}\n        />\n\n        <Spacer y={0.5} />\n\n        <Input\n          className=\"input\"\n          icon={<Key />}\n          placeholder=\"PIN\"\n          value={pin}\n          onChange={handlePinChange}\n          maxLength={6}\n        />\n\n        <Spacer y={1} />\n\n        <Button\n          type=\"secondary\"\n          onClick={handleJoinGamePress}\n          disabled={!canSubmit}\n        >\n          Join\n        </Button>\n      </div>\n\n      <Spacer y={1} />\n\n      <Link to=\"/host\">\n        <Text type=\"secondary\" b>\n          Host a game!\n        </Text>\n      </Link>\n    </div>\n  );\n};\n\nexport default Home;\n","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Player/Game/Game.tsx",[],"/home/iremgerdan/Desktop/triveb/frontend/src/screens/Player/Lobby/Lobby.tsx",["129","130","131","132"],"import React, { useEffect, useState } from \"react\";\nimport { Grid, Spacer, Spinner, Text, useToasts } from \"@geist-ui/react\";\nimport { Redirect, useHistory, useLocation } from \"react-router-dom\";\n\nimport { delay } from \"utils/helpers\";\n\nimport \"./Lobby.scss\";\n\nconst Lobby = () => {\n  const { state: routerState } = useLocation();\n  const history = useHistory();\n  const [, setToast] = useToasts();\n\n  const [started, setStarted] = useState(false);\n  const [counter, setCounter] = useState(5);\n\n  const socketEventListeners = () => {\n    window.socket.on(\"game-started\", async (data: any) => {\n      setStarted(true);\n\n      setToast({\n        text: \"Game starting soon be ready!\",\n        type: \"success\",\n        delay: 5000,\n      });\n\n      const intervalId = setInterval(() => {\n        setCounter((currentState) => {\n          if (currentState === 1) {\n            clearInterval(intervalId);\n\n            return 0;\n          }\n\n          return currentState - 1;\n        });\n      }, 1000);\n\n      await delay(5000);\n\n      history.replace(`/game`, {\n        pin,\n        quiz: data,\n      });\n    });\n  };\n\n  useEffect(() => {\n    socketEventListeners();\n\n    return () => {\n      window.socket.off(\"game-started\");\n    };\n  }, []);\n\n  if (!routerState) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const { pin } = routerState as { pin: string };\n\n  return (\n    <div className=\"player-lobby\">\n      <Spacer y={2} />\n\n      <Text h1>Waiting on host start the game</Text>\n\n      <Spacer y={1} />\n\n      <Text h3>Do you see your name on the screen</Text>\n    </div>\n  );\n};\n\nexport default Lobby;\n","/home/iremgerdan/Desktop/triveb/frontend/src/containers/Navbar.tsx",[],"/home/iremgerdan/Desktop/triveb/frontend/src/utils/helpers.ts",[],"/home/iremgerdan/Desktop/triveb/frontend/src/store/auth/auth.ts",[],"/home/iremgerdan/Desktop/triveb/frontend/src/hooks/use-local-storage.tsx",[],"/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/Lobby/Lobby.tsx",["133"],"/* eslint-disable react-hooks/rules-of-hooks */\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  Grid,\n  Spacer,\n  Text,\n  Note,\n  useToasts,\n} from \"@geist-ui/react\";\nimport { Redirect, useHistory, useLocation } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport * as validator from \"class-validator\";\n\nimport { loggedUser } from \"store/auth/auth\";\n\nimport { delay } from \"utils/helpers\";\n\nimport { Player } from \"interfaces/services/game/player\";\n\nimport \"./Lobby.scss\";\n\nconst Lobby = () => {\n  const { state: routerState } = useLocation<{ pin: string }>();\n  const history = useHistory();\n  const user = useRecoilValue(loggedUser);\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [started, setStarted] = useState(false);\n  const [, setToast] = useToasts();\n\n  if (!routerState) {\n    return <Redirect to=\"/host\" />;\n  }\n\n  const { pin } = routerState;\n\n  useEffect(() => {\n    socketEventListeners();\n\n    return () => {\n      window.socket.off(\"player-joined\");\n      window.socket.off(\"game-started\");\n    };\n  }, []);\n\n  const handleStartPress = () => {\n    window.socket.emit(\"start-game\", {\n      playerName: user!.fullname,\n      pin,\n    });\n  };\n\n  const socketEventListeners = () => {\n    window.socket.on(\"player-joined\", (player: Player) => {\n      setPlayers((currentState) => {\n        return [...currentState, player];\n      });\n\n      setToast({\n        text: `${player.playerName} is joined.`,\n        type: \"success\",\n      });\n    });\n\n    window.socket.on(\"game-started\", async (data: any) => {\n      setStarted(true);\n\n      setToast({\n        text: \"Game starting soon be ready!\",\n        type: \"success\",\n        delay: 5000,\n      });\n\n      await delay(5000);\n\n      setPlayers((currentState) => {\n        history.replace(`/host/game`, {\n          quiz: data,\n          players: currentState,\n          pin,\n        });\n\n        return currentState;\n      });\n    });\n  };\n\n  const canSubmit = validator.arrayMinSize(players, 1) && !started;\n\n  return (\n    <div className=\"host-lobby\">\n      <Spacer y={2} />\n\n      <Text h1>Join this game using the game PIN</Text>\n      <Text h2 type=\"default\">\n        {pin}\n      </Text>\n\n      <Spacer y={2} />\n\n      <div>\n        {players.length < 1 && (\n          <>\n            <Note label={false}>Waiting players!</Note>\n            <Spacer y={2} />\n          </>\n        )}\n\n        {players.map((item) => (\n          <>\n            <Card>{item.playerName}</Card>\n\n            <Spacer y={1} />\n          </>\n        ))}\n\n        <Spacer y={1} />\n\n        <Button\n          type=\"secondary\"\n          size=\"large\"\n          disabled={!canSubmit}\n          onClick={handleStartPress}\n        >\n          Start Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Lobby;\n","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/Home/Home.tsx",["134","135"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  Grid,\n  Spacer,\n  Text,\n  Note,\n  useToasts,\n  Loading,\n} from \"@geist-ui/react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Plus, Trash } from \"@geist-ui/react-icons\";\nimport useLocalStorage from \"hooks/use-local-storage\";\n\nimport * as services from \"services\";\n\nimport { Quiz } from \"interfaces/services/models/Quiz\";\n\nimport \"./Home.scss\";\n\nconst Home = () => {\n  const history = useHistory();\n  const [quizzes, setQuizzes] = useState<Quiz[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [, setToast] = useToasts();\n  const [accessToken] = useLocalStorage(\"access-token\");\n\n  useEffect(() => {\n    const getData = async () => {\n      if (!accessToken) {\n        return;\n      }\n\n      try {\n        const { data } = await services.getQuizzes();\n\n        setQuizzes(data);\n      } catch (error) {\n        setToast({\n          text: \"Internal server error\",\n          type: \"error\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getData();\n    socketEventListeners();\n\n    return () => {\n      window.socket.off(\"game-created\");\n    };\n  }, []);\n\n  const handleQuizPress = (quiz: Quiz) => {\n    history.push(`/host/quiz/${quiz.id}`);\n    // window.socket.emit(\"create-game\", {\n    //   quizId: quiz.id,\n    // });\n  };\n\n  const socketEventListeners = () => {\n    window.socket.on(\"game-created\", (data: { pin: string }) => {\n      history.push(`/host/lobby`, {\n        pin: data.pin,\n      });\n    });\n  };\n\n  return (\n    <div className=\"host-home\">\n      <Spacer y={2} />\n\n      <div className=\"header\">\n        <Text h1>Quizzes</Text>\n\n        <Link to=\"/host/new-quiz\">\n          <Button auto type=\"secondary\" icon={<Plus />}>\n            New Quiz\n          </Button>\n        </Link>\n      </div>\n\n      <Spacer y={2} />\n\n      <div>\n        {loading ? (\n          <Loading size=\"large\" />\n        ) : (\n          <>\n            {quizzes.length < 1 && (\n              <>\n                <Note filled>No quizzes found!</Note>\n              </>\n            )}\n\n            {quizzes.map((item) => (\n              <>\n                <Card className=\"quiz\" onClick={() => handleQuizPress(item)}>\n                  <Card.Content className=\"quizContent\">\n                    {item.name}\n                  </Card.Content>\n                </Card>\n\n                <Spacer y={1} />\n              </>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/NewQuiz/NewQuiz.tsx",["136","137"],"import React, { useState } from \"react\";\nimport {\n  Button,\n  Card,\n  Grid,\n  Input,\n  Select,\n  Spacer,\n  Text,\n  Textarea,\n  useToasts,\n} from \"@geist-ui/react\";\nimport { Check, Plus, Trash } from \"@geist-ui/react-icons\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport _ from \"lodash\";\n\nimport * as services from \"services\";\n\nimport { editingQuiz } from \"store/quiz/quiz\";\n\nimport { QuizzesCreateAnswerDto } from \"interfaces/services/quizzes/quizzes.create-answer.dto\";\nimport { QuizzesCreateQuestionDto } from \"interfaces/services/quizzes/quizzes.create-question.dto\";\n\nimport \"./NewQuiz.scss\";\n\nconst NewQuiz = () => {\n  const history = useHistory();\n\n  const [, setToast] = useToasts();\n\n  const [quiz, setQuiz] = useRecoilState(editingQuiz);\n  const [loading, setLoading] = useState(false);\n\n  const getCorrectAnswer = (answers: QuizzesCreateAnswerDto[]) => {\n    const correctAnswer = answers.findIndex((item) => item.isCorrectAnswer);\n\n    return String(correctAnswer);\n  };\n\n  const createQuestion = () => {\n    setQuiz({\n      ...quiz,\n      questions: [\n        ...quiz.questions,\n        {\n          question: \"\",\n          answers: [\n            { answer: \"\", isCorrectAnswer: true },\n            { answer: \"\", isCorrectAnswer: false },\n          ],\n          durationInSeconds: 0,\n        },\n      ],\n    });\n  };\n\n  const createAnswer = (question: QuizzesCreateQuestionDto) => {\n    const newQuestions = quiz.questions.map((item) => {\n      if (item === question) {\n        return {\n          ...item,\n          answers: [\n            ...item.answers,\n            {\n              answer: \"\",\n              isCorrectAnswer: true,\n            },\n          ],\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz,\n      questions: newQuestions,\n    });\n  };\n\n  const deleteAnswer = (\n    question: QuizzesCreateQuestionDto,\n    answer: QuizzesCreateAnswerDto\n  ) => {\n    const newQuestions = quiz.questions.map((item) => {\n      if (item === question) {\n        const newAnswers = item.answers.filter((a) => a !== answer);\n\n        return {\n          ...item,\n          answers: newAnswers,\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz,\n      questions: newQuestions,\n    });\n  };\n\n  const deleteQuestion = (question: QuizzesCreateQuestionDto) => {\n    const newQuestions = quiz.questions.filter((item) => item !== question);\n\n    setQuiz({\n      ...quiz,\n      questions: newQuestions,\n    });\n  };\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.currentTarget.value;\n\n    setQuiz({\n      ...quiz!,\n      name: value || \"\",\n    });\n  };\n\n  const handleChangeQuestion = (\n    question: QuizzesCreateQuestionDto,\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const newQuestions = quiz.questions.map((item) => {\n      if (item === question) {\n        return {\n          ...item,\n          question: event.currentTarget.value || \"\",\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz,\n      questions: newQuestions,\n    });\n  };\n\n  const handleChangeAnswer = (\n    question: QuizzesCreateQuestionDto,\n    answer: QuizzesCreateAnswerDto,\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const newQuestions = quiz.questions.map((item) => {\n      if (item === question) {\n        const updatedAnswers = item.answers.map((a) => {\n          if (a === answer) {\n            return {\n              ...a,\n              answer: event.currentTarget.value || \"\",\n            };\n          }\n\n          return a;\n        });\n\n        return {\n          ...item,\n          answers: updatedAnswers,\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz,\n      questions: newQuestions,\n    });\n  };\n\n  const handleChangeDuration = (\n    question: QuizzesCreateQuestionDto,\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const newQuestions = quiz.questions.map((item) => {\n      if (item === question) {\n        return {\n          ...item,\n          durationInSeconds: +event.currentTarget.value,\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz,\n      questions: newQuestions,\n    });\n  };\n\n  const handleChangeCorrectAnswer = (\n    question: QuizzesCreateQuestionDto,\n    value: string\n  ) => {\n    const newQuestions = quiz.questions.map((item) => {\n      if (item === question) {\n        const updatedAnswers = item.answers.map((answer, i) => {\n          if (i === +value) {\n            return {\n              ...answer,\n              isCorrectAnswer: true,\n            };\n          }\n\n          return {\n            ...answer,\n            isCorrectAnswer: false,\n          };\n        });\n\n        return {\n          ...item,\n          answers: updatedAnswers,\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz,\n      questions: newQuestions,\n    });\n  };\n\n  const handleCreateQuizPress = async () => {\n    try {\n      setLoading(true);\n\n      await services.createQuiz(quiz);\n\n      setToast({\n        text: \"Quiz was created.\",\n        type: \"success\",\n      });\n\n      history.push(\"/host\");\n    } catch (error) {\n      setToast({\n        text: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n        type: \"error\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"new-quiz\">\n      <Spacer y={2} />\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <Input\n          className=\"quiz-name\"\n          inputMode=\"text\"\n          placeholder=\"Quiz name\"\n          value={quiz.name}\n          onInput={handleNameChange}\n        ></Input>\n\n        <Link to=\"new-quiz\">\n          <Button\n            icon={<Check />}\n            type=\"secondary\"\n            auto\n            loading={loading}\n            onClick={handleCreateQuizPress}\n          />\n        </Link>\n      </div>\n\n      <Spacer y={2} />\n\n      <div>\n        {quiz.questions.map((item) => (\n          <>\n            <Card className=\"form\">\n              <Textarea\n                placeholder=\"Question\"\n                width=\"100%\"\n                value={item.question}\n                onChange={(e) => handleChangeQuestion(item, e)}\n              />\n              <Spacer y={1} />\n\n              {item.answers.map((answer, index) => (\n                <>\n                  <Input\n                    placeholder={`Answer ${index + 1}`}\n                    width=\"100%\"\n                    value={answer.answer}\n                    onChange={(e) => handleChangeAnswer(item, answer, e)}\n                    iconRight={item.answers.length > 2 && <Trash />}\n                    iconClickable\n                    onIconClick={() => deleteAnswer(item, answer)}\n                  />\n\n                  <Spacer y={0.5} />\n                </>\n              ))}\n\n              {item.answers.length < 4 && (\n                <Input\n                  readOnly\n                  placeholder=\"Add answer\"\n                  width=\"100%\"\n                  onClick={() => createAnswer(item)}\n                  iconRight={<Plus />}\n                  iconClickable\n                  onIconClick={() => createAnswer(item)}\n                />\n              )}\n\n              <Spacer y={1} />\n\n              <Input\n                placeholder=\"Duration (second)\"\n                width=\"100%\"\n                onChange={(e) => handleChangeDuration(item, e)}\n                value={\n                  item.durationInSeconds ? String(item.durationInSeconds) : \"\"\n                }\n              />\n\n              <Spacer y={1} />\n\n              <Select\n                placeholder=\"Correct answer\"\n                value={getCorrectAnswer(item.answers)}\n                onChange={(e) => handleChangeCorrectAnswer(item, e as string)}\n              >\n                {item.answers.map((answer, i) => (\n                  <Select.Option value={String(i)}>\n                    Answer {i + 1}\n                  </Select.Option>\n                ))}\n              </Select>\n\n              <Card.Footer className=\"footer\">\n                <Button\n                  icon={<Trash />}\n                  type=\"error\"\n                  auto\n                  onClick={() => deleteQuestion(item)}\n                >\n                  Delete\n                </Button>\n              </Card.Footer>\n            </Card>\n\n            <Spacer y={1} />\n          </>\n        ))}\n\n        {quiz.questions.length <= 50 && (\n          <Card className=\"add\" hoverable onClick={createQuestion}>\n            <Text>Add Question</Text>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NewQuiz;\n","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/SignUp/SignUp.tsx",["138"],"import React, { useState } from \"react\";\nimport { Button, Grid, Input, Spacer, Text, useToasts } from \"@geist-ui/react\";\nimport { Mail, User } from \"@geist-ui/react-icons\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport * as validator from \"class-validator\";\n\nimport * as services from \"services\";\n\nimport { loggedUser } from \"store/auth/auth\";\n\nimport \"./SignUp.scss\";\n\nconst SignUp = () => {\n  const [, setUser] = useRecoilState(loggedUser);\n  const history = useHistory();\n  const [, setToast] = useToasts();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [fullname, setFullname] = useState(\"\");\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleSignUpPressed = async () => {\n    try {\n      setLoading(true);\n\n      const { data } = await services.signUp({\n        email,\n        fullname,\n        password,\n        passwordConfirmation,\n      });\n\n      if (data.token) {\n        localStorage.setItem(\"access-token\", data.token);\n\n        setUser(data.user);\n\n        history.replace(\"/host\");\n\n        return;\n      }\n    } catch (error) {\n      setToast({\n        text: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n        type: \"error\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.currentTarget.value);\n  };\n\n  const handleFullnameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFullname(event.currentTarget.value);\n  };\n\n  const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPassword(event.currentTarget.value);\n  };\n\n  const handlePasswordConfirmationChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setPasswordConfirmation(event.currentTarget.value);\n  };\n\n  const canSubmit =\n    validator.isEmail(email) &&\n    validator.length(fullname, 1, 256) &&\n    validator.equals(password, passwordConfirmation) &&\n    validator.length(password, 8, 128) &&\n    validator.length(passwordConfirmation, 8, 128) &&\n    validator.matches(\n      password,\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,128}$/\n    ) &&\n    validator.matches(\n      passwordConfirmation,\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,128}$/\n    );\n\n  return (\n    <div className=\"sign-up\">\n      <Text h1>Sign Up</Text>\n\n      <Spacer y={1} />\n\n      <Input\n        className=\"input\"\n        icon={<User />}\n        placeholder=\"Full Name\"\n        onChange={handleFullnameChange}\n      />\n\n      <Spacer y={0.5} />\n\n      <Input\n        className=\"input\"\n        icon={<Mail />}\n        placeholder=\"Email\"\n        onChange={handleEmailChange}\n      />\n\n      <Spacer y={0.5} />\n\n      <Input.Password\n        className=\"input\"\n        placeholder=\"Password\"\n        onChange={handlePasswordChange}\n      />\n\n      <Spacer y={0.5} />\n\n      <Input.Password\n        className=\"input\"\n        placeholder=\"Confirm Password\"\n        onChange={handlePasswordConfirmationChange}\n      />\n\n      <Spacer y={1} />\n\n      <Button\n        type=\"secondary\"\n        disabled={!canSubmit}\n        loading={loading}\n        onClick={handleSignUpPressed}\n      >\n        Sign Up\n      </Button>\n\n      <Spacer y={1} />\n\n      <Link to=\"login\">\n        <Text type=\"secondary\" b>\n          Already have an account? Log in\n        </Text>\n      </Link>\n    </div>\n  );\n};\n\nexport default SignUp;\n","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/Login/Login.tsx",["139","140"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Input, Spacer, Text, useToasts } from \"@geist-ui/react\";\nimport { Mail } from \"@geist-ui/react-icons\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport * as validator from \"class-validator\";\n\nimport * as services from \"services\";\n\nimport { loggedUser } from \"store/auth/auth\";\n\nimport \"./Login.scss\";\n\nconst Login = () => {\n  const [, setUser] = useRecoilState(loggedUser);\n  const history = useHistory();\n  const [, setToast] = useToasts();\n\n  const [loading, setLoading] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleLoginPressed = async () => {\n    try {\n      setLoading(true);\n\n      const { data } = await services.login({\n        email,\n        password,\n      });\n\n      if (data.token) {\n        localStorage.setItem(\"access-token\", data.token);\n\n        setUser(data.user);\n\n        history.replace(\"/host\");\n\n        return;\n      }\n    } catch (error) {\n      setToast({\n        text: \"Login failed, please check your credentials\",\n        type: \"error\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.currentTarget.value);\n  };\n\n  const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPassword(event.currentTarget.value);\n  };\n\n  const canSubmit =\n    validator.isEmail(email) &&\n    validator.length(password, 8, 128) &&\n    validator.matches(\n      password,\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,128}$/\n    );\n\n  return (\n    <div className=\"login\">\n      <Text h1>Login</Text>\n\n      <Spacer y={1} />\n\n      <Input\n        className=\"input\"\n        icon={<Mail />}\n        placeholder=\"Email\"\n        onChange={handleEmailChange}\n        value={email}\n      />\n\n      <Spacer y={0.5} />\n\n      <Input.Password\n        className=\"input\"\n        placeholder=\"Password\"\n        onChange={handlePasswordChange}\n        value={password}\n      />\n\n      <Spacer y={1} />\n\n      <Button\n        type=\"secondary\"\n        disabled={!canSubmit}\n        loading={loading}\n        onClick={handleLoginPressed}\n      >\n        Login\n      </Button>\n\n      <Spacer y={1} />\n\n      <Link to=\"signup\">\n        <Text type=\"secondary\" b>\n          Don't have an account? Sign Up\n        </Text>\n      </Link>\n    </div>\n  );\n};\n\nexport default Login;\n","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/GameFinished/GameFinished.tsx",["141"],"import React from \"react\";\nimport { Button, Grid, Spacer, Table, Text } from \"@geist-ui/react\";\nimport { Link, Redirect, useLocation } from \"react-router-dom\";\nimport _ from \"lodash\";\n\nimport { Game } from \"interfaces/services/models/Game\";\n\nimport \"./GameFinished.scss\";\n\nconst GameFinished = () => {\n  const { state: routerState } = useLocation<{\n    game: Game;\n  }>();\n\n  if (!routerState) {\n    return <Redirect to=\"/host\" />;\n  }\n\n  const { game } = routerState;\n  game.players = _.sortBy(game.players, (player) => -player.totalPoints);\n\n  const winnerPlayer = _.maxBy(game.players, (player) => player.totalPoints)!;\n\n  const playersWithSameScore = game.players.filter(\n    (player) => player.totalPoints === winnerPlayer.totalPoints\n  );\n\n  const isHavePlayerSamePoint = playersWithSameScore.length > 1;\n\n  const winnersTitle = isHavePlayerSamePoint ? \"Winners\" : \"Winner\";\n\n  const winners = isHavePlayerSamePoint\n    ? playersWithSameScore.map((player) => player.playerName).join(\", \")\n    : winnerPlayer.playerName;\n\n  return (\n    <div className=\"host-game-finished\">\n      <Spacer y={2} />\n\n      <Text h1>Game finished</Text>\n\n      <Spacer y={1} />\n\n      <Text h3>{winnersTitle}</Text>\n      <Text h3 type=\"secondary\">\n        {winners}\n      </Text>\n\n      <Spacer y={1} />\n\n      <Text h3>Total Points</Text>\n      <Text h3 type=\"secondary\">\n        {winnerPlayer.totalPoints}\n      </Text>\n\n      <Spacer y={4} />\n\n      <Table className=\"table\" data={game.players} emptyText=\"0\">\n        <Table.Column prop=\"playerName\" label=\"Player Name\" />\n        <Table.Column prop=\"totalPoints\" label=\"Points\" />\n        <Table.Column prop=\"numberOfCorrectAnswers\" label=\"Correct\" />\n        <Table.Column prop=\"numberOfIncorrectAnswers\" label=\"Incorrect\" />\n        <Table.Column prop=\"numberOfEmptyAnswers\" label=\"Empty\" />\n      </Table>\n\n      <Spacer y={4} />\n\n      <Link to=\"/host\">\n        <Button>Back to home</Button>\n      </Link>\n    </div>\n  );\n};\n\nexport default GameFinished;\n","/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/Game/Game.tsx",[],"/home/iremgerdan/Desktop/triveb/frontend/src/services/index.ts",[],"/home/iremgerdan/Desktop/triveb/frontend/src/screens/Host/Quiz/Quiz.tsx",["142","143","144","145","146"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  Grid,\n  Input,\n  Select,\n  Spacer,\n  Text,\n  Textarea,\n  useToasts,\n} from \"@geist-ui/react\";\nimport { Check, Play, Plus, Trash } from \"@geist-ui/react-icons\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport _ from \"lodash\";\n\nimport * as services from \"services\";\n\nimport { editingQuiz } from \"store/quiz/quiz\";\n\nimport { QuizzesCreateAnswerDto } from \"interfaces/services/quizzes/quizzes.create-answer.dto\";\nimport { QuizzesCreateQuestionDto } from \"interfaces/services/quizzes/quizzes.create-question.dto\";\n\nimport \"./Quiz.scss\";\nimport useLocalStorage from \"hooks/use-local-storage\";\nimport { Quiz as QuizModel } from \"interfaces/services/models/Quiz\";\nimport { Question } from \"interfaces/services/models/Question\";\nimport { QuestionAnswer } from \"interfaces/services/models/QuestionAnswer\";\n\nconst Quiz = () => {\n  const history = useHistory();\n\n  const [accessToken] = useLocalStorage(\"access-token\");\n\n  const [, setToast] = useToasts();\n\n  const [quiz, setQuiz] = useState<QuizModel>();\n  const [loading, setLoading] = useState(false);\n\n  const params: any = useParams();\n\n  useEffect(() => {\n    const getData = async () => {\n      if (!accessToken) {\n        return;\n      }\n\n      try {\n        const { data } = await services.getQuizById(params.id);\n\n        setQuiz(data);\n      } catch (error) {\n        setToast({\n          text: \"Internal server error\",\n          type: \"error\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getData();\n    socketEventListeners();\n\n    return () => {\n      window.socket.off(\"game-created\");\n    };\n  }, []);\n\n  const getCorrectAnswer = (answers: QuizzesCreateAnswerDto[]) => {\n    const correctAnswer = answers.findIndex((item) => item.isCorrectAnswer);\n\n    return correctAnswer === -1 ? undefined : String(correctAnswer);\n  };\n\n  const createQuestion = () => {\n    setQuiz({\n      ...quiz!,\n      questions: [\n        ...quiz!.questions,\n        {\n          question: \"\",\n          answers: [\n            { answer: \"\", isCorrectAnswer: false },\n            { answer: \"\", isCorrectAnswer: false },\n          ],\n          durationInSeconds: 0,\n        } as Question,\n      ],\n    });\n  };\n\n  const createAnswer = (question: QuizzesCreateQuestionDto) => {\n    const newQuestions = quiz!.questions.map((item) => {\n      if (item === question) {\n        return {\n          ...item,\n          answers: [\n            ...item.answers,\n            {\n              answer: \"\",\n              isCorrectAnswer: true,\n            } as QuestionAnswer,\n          ],\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz!,\n      questions: newQuestions,\n    });\n  };\n\n  const deleteAnswer = (\n    question: QuizzesCreateQuestionDto,\n    answer: QuizzesCreateAnswerDto\n  ) => {\n    const newQuestions = quiz!.questions.map((item) => {\n      if (item === question) {\n        const newAnswers = item.answers.filter((a) => a !== answer);\n\n        return {\n          ...item,\n          answers: newAnswers,\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz!,\n      questions: newQuestions,\n    });\n  };\n\n  const deleteQuestion = (question: QuizzesCreateQuestionDto) => {\n    const newQuestions = quiz!.questions.filter((item) => item !== question);\n\n    setQuiz({\n      ...quiz!,\n      questions: newQuestions,\n    });\n  };\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.currentTarget.value;\n\n    setQuiz({\n      ...quiz!,\n      name: value || \"\",\n    });\n  };\n\n  const handleChangeQuestion = (\n    question: QuizzesCreateQuestionDto,\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const newQuestions = quiz!.questions.map((item) => {\n      if (item === question) {\n        return {\n          ...item,\n          question: event.currentTarget.value || \"\",\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz!,\n      questions: newQuestions,\n    });\n  };\n\n  const handleChangeAnswer = (\n    question: QuizzesCreateQuestionDto,\n    answer: QuizzesCreateAnswerDto,\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const newQuestions = quiz!.questions.map((item) => {\n      if (item === question) {\n        const updatedAnswers = item.answers.map((a) => {\n          if (a === answer) {\n            return {\n              ...a,\n              answer: event.currentTarget.value || \"\",\n            };\n          }\n\n          return a;\n        });\n\n        return {\n          ...item,\n          answers: updatedAnswers,\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz!,\n      questions: newQuestions,\n    });\n  };\n\n  const handleChangeDuration = (\n    question: QuizzesCreateQuestionDto,\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const newQuestions = quiz!.questions.map((item) => {\n      if (item === question) {\n        return {\n          ...item,\n          durationInSeconds: +event.currentTarget.value,\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz!,\n      questions: newQuestions,\n    });\n  };\n\n  const handleChangeCorrectAnswer = (\n    question: QuizzesCreateQuestionDto,\n    value: string\n  ) => {\n    const newQuestions = quiz!.questions.map((item) => {\n      if (item === question) {\n        const updatedAnswers = item.answers.map((answer, i) => {\n          if (i === +value) {\n            return {\n              ...answer,\n              isCorrectAnswer: true,\n            };\n          }\n\n          return {\n            ...answer,\n            isCorrectAnswer: false,\n          };\n        });\n\n        return {\n          ...item,\n          answers: updatedAnswers,\n        };\n      }\n\n      return item;\n    });\n\n    setQuiz({\n      ...quiz!,\n      questions: newQuestions,\n    });\n  };\n\n  const handlePlayPress = () => {\n    window.socket.emit(\"create-game\", {\n      quizId: quiz!.id,\n    });\n  };\n\n  const socketEventListeners = () => {\n    window.socket.on(\"game-created\", (data: { pin: string }) => {\n      history.push(`/host/lobby`, {\n        pin: data.pin,\n      });\n    });\n  };\n\n  const handleSaveQuizPress = async () => {\n    try {\n      setLoading(true);\n\n      await services.updateQuiz(params.id, quiz!);\n\n      setToast({\n        text: \"Quiz updated.\",\n        type: \"success\",\n      });\n    } catch (error) {\n      setToast({\n        text: error.message || \"Server Error\",\n        type: \"error\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteQuizPress = async () => {\n    try {\n      setLoading(true);\n\n      await services.deleteQuiz(params.id);\n\n      setToast({\n        text: \"Quiz deleted.\",\n        type: \"success\",\n      });\n    } catch (error) {\n      setToast({\n        text: error.message || \"Server Error\",\n        type: \"error\",\n      });\n    } finally {\n      setLoading(false);\n    }\n\n    history.push(`/host`);\n  };\n\n  return (\n    <div className=\"quiz-details\">\n      {quiz && (\n        <>\n          <Spacer y={2} />\n\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n            }}\n          >\n            <Input\n              className=\"quiz-name\"\n              inputMode=\"text\"\n              placeholder=\"Quiz name\"\n              value={quiz!.name}\n              onInput={handleNameChange}\n            ></Input>\n\n            <div>\n              <Button\n                className=\"play-button\"\n                icon={<Play />}\n                type=\"secondary\"\n                auto\n                loading={loading}\n                onClick={handlePlayPress}\n              />\n              <Button\n                className=\"save-button\"\n                icon={<Check />}\n                type=\"secondary\"\n                auto\n                loading={loading}\n                onClick={handleSaveQuizPress}\n              />\n              <Button\n                icon={<Trash />}\n                type=\"error\"\n                auto\n                loading={loading}\n                onClick={handleDeleteQuizPress}\n              />\n            </div>\n          </div>\n\n          <Spacer y={2} />\n\n          <div>\n            {quiz!.questions.map((item) => (\n              <>\n                <Card className=\"form\">\n                  <Textarea\n                    placeholder=\"Question\"\n                    width=\"100%\"\n                    value={item.question}\n                    onChange={(e) => handleChangeQuestion(item, e)}\n                  />\n                  <Spacer y={1} />\n\n                  {item.answers.map((answer, index) => (\n                    <>\n                      <Input\n                        placeholder={`Answer ${index + 1}`}\n                        width=\"100%\"\n                        value={answer.answer}\n                        onChange={(e) => handleChangeAnswer(item, answer, e)}\n                        iconRight={item.answers.length > 2 && <Trash />}\n                        iconClickable\n                        onIconClick={() => deleteAnswer(item, answer)}\n                      />\n\n                      <Spacer y={0.5} />\n                    </>\n                  ))}\n\n                  {item.answers.length < 4 && (\n                    <Input\n                      readOnly\n                      placeholder=\"Add answer\"\n                      width=\"100%\"\n                      onClick={() => createAnswer(item)}\n                      iconRight={<Plus />}\n                      iconClickable\n                      onIconClick={() => createAnswer(item)}\n                    />\n                  )}\n\n                  <Spacer y={1} />\n\n                  <Input\n                    placeholder=\"Duration (second)\"\n                    width=\"100%\"\n                    onChange={(e) => handleChangeDuration(item, e)}\n                    value={\n                      item.durationInSeconds\n                        ? String(item.durationInSeconds)\n                        : \"\"\n                    }\n                  />\n\n                  <Spacer y={1} />\n\n                  <Select\n                    placeholder=\"Correct answer\"\n                    value={getCorrectAnswer(item.answers)}\n                    onChange={(e) =>\n                      handleChangeCorrectAnswer(item, e as string)\n                    }\n                  >\n                    {item.answers.map((answer, i) => (\n                      <Select.Option value={String(i)}>\n                        Answer {i + 1}\n                      </Select.Option>\n                    ))}\n                  </Select>\n\n                  <Card.Footer className=\"footer\">\n                    <Button\n                      icon={<Trash />}\n                      type=\"error\"\n                      auto\n                      onClick={() => deleteQuestion(item)}\n                    >\n                      Delete\n                    </Button>\n                  </Card.Footer>\n                </Card>\n\n                <Spacer y={1} />\n              </>\n            ))}\n\n            {quiz!.questions.length <= 50 && (\n              <Card className=\"add\" hoverable onClick={createQuestion}>\n                <Text>Add Question</Text>\n              </Card>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n","/home/iremgerdan/Desktop/triveb/frontend/src/store/game/player.ts",[],"/home/iremgerdan/Desktop/triveb/frontend/src/services/quizzes.ts",[],"/home/iremgerdan/Desktop/triveb/frontend/src/services/users.ts",[],"/home/iremgerdan/Desktop/triveb/frontend/src/store/quiz/quiz.ts",[],"/home/iremgerdan/Desktop/triveb/frontend/src/utils/http.ts",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":2,"column":18,"nodeType":"153","messageId":"154","endLine":2,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":2,"column":27,"nodeType":"153","messageId":"154","endLine":2,"endColumn":31},{"ruleId":"151","severity":1,"message":"152","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"151","severity":1,"message":"155","line":2,"column":24,"nodeType":"153","messageId":"154","endLine":2,"endColumn":31},{"ruleId":"151","severity":1,"message":"156","line":14,"column":10,"nodeType":"153","messageId":"154","endLine":14,"endColumn":17},{"ruleId":"151","severity":1,"message":"157","line":15,"column":10,"nodeType":"153","messageId":"154","endLine":15,"endColumn":17},{"ruleId":"151","severity":1,"message":"152","line":7,"column":3,"nodeType":"153","messageId":"154","endLine":7,"endColumn":7},{"ruleId":"151","severity":1,"message":"152","line":5,"column":3,"nodeType":"153","messageId":"154","endLine":5,"endColumn":7},{"ruleId":"151","severity":1,"message":"158","line":13,"column":16,"nodeType":"153","messageId":"154","endLine":13,"endColumn":21},{"ruleId":"151","severity":1,"message":"152","line":5,"column":3,"nodeType":"153","messageId":"154","endLine":5,"endColumn":7},{"ruleId":"151","severity":1,"message":"159","line":16,"column":8,"nodeType":"153","messageId":"154","endLine":16,"endColumn":9},{"ruleId":"151","severity":1,"message":"152","line":2,"column":18,"nodeType":"153","messageId":"154","endLine":2,"endColumn":22},{"ruleId":"151","severity":1,"message":"160","line":1,"column":17,"nodeType":"153","messageId":"154","endLine":1,"endColumn":26},{"ruleId":"151","severity":1,"message":"152","line":2,"column":18,"nodeType":"153","messageId":"154","endLine":2,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":2,"column":18,"nodeType":"153","messageId":"154","endLine":2,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":5,"column":3,"nodeType":"153","messageId":"154","endLine":5,"endColumn":7},{"ruleId":"151","severity":1,"message":"161","line":14,"column":10,"nodeType":"153","messageId":"154","endLine":14,"endColumn":14},{"ruleId":"151","severity":1,"message":"162","line":15,"column":10,"nodeType":"153","messageId":"154","endLine":15,"endColumn":24},{"ruleId":"151","severity":1,"message":"159","line":16,"column":8,"nodeType":"153","messageId":"154","endLine":16,"endColumn":9},{"ruleId":"151","severity":1,"message":"163","line":20,"column":10,"nodeType":"153","messageId":"154","endLine":20,"endColumn":21},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"@typescript-eslint/no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'Spinner' is defined but never used.","'started' is assigned a value but never used.","'counter' is assigned a value but never used.","'Trash' is defined but never used.","'_' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'useRecoilState' is defined but never used.","'editingQuiz' is defined but never used.","no-global-assign","no-unsafe-negation"]